class Solution {
    matches(s: string, p: string, i: number, j: number, memory: (boolean | null)[][]): boolean {
        // Base cases 
        if (i >= s.length && j >= p.length) {
            return true;
        } else if (j >= p.length) {
            return false;
        }

        // Check if we have already computed the result
        if (memory[i][j] !== null) {
            return memory[i][j];
        }

        const matches = i < s.length && (s[i] === p[j] || p[j] === '.');
        let isAMatch: boolean | null;

        if (j < p.length - 1 && p[j + 1] === '*') {
            isAMatch = (matches && this.matches(s, p, i + 1, j, memory)) || this.matches(s, p, i, j + 2, memory);
        } else {
            isAMatch = matches && this.matches(s, p, i + 1, j + 1, memory);
        }

        // We register the result in memory
        memory[i][j] = isAMatch;

        return isAMatch;
    }

    isMatch(s: string, p: string): boolean {
        const memory: (boolean | null)[][] = Array.from({ length: s.length + 1 }, () => Array(p.length).fill(null));
        return this.matches(s, p, 0, 0, memory);
    }
}
